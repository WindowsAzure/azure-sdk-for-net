// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Personalizer.Models
{
    /// <summary> The status of the job processing the evaluation. </summary>
    public readonly partial struct EvaluationJobStatus : IEquatable<EvaluationJobStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EvaluationJobStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EvaluationJobStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CompletedValue = "completed";
        private const string PendingValue = "pending";
        private const string FailedValue = "failed";
        private const string NotSubmittedValue = "notSubmitted";
        private const string TimeoutValue = "timeout";
        private const string OptimalPolicyAppliedValue = "optimalPolicyApplied";
        private const string OnlinePolicyRetainedValue = "onlinePolicyRetained";

        /// <summary> completed. </summary>
        public static EvaluationJobStatus Completed { get; } = new EvaluationJobStatus(CompletedValue);
        /// <summary> pending. </summary>
        public static EvaluationJobStatus Pending { get; } = new EvaluationJobStatus(PendingValue);
        /// <summary> failed. </summary>
        public static EvaluationJobStatus Failed { get; } = new EvaluationJobStatus(FailedValue);
        /// <summary> notSubmitted. </summary>
        public static EvaluationJobStatus NotSubmitted { get; } = new EvaluationJobStatus(NotSubmittedValue);
        /// <summary> timeout. </summary>
        public static EvaluationJobStatus Timeout { get; } = new EvaluationJobStatus(TimeoutValue);
        /// <summary> optimalPolicyApplied. </summary>
        public static EvaluationJobStatus OptimalPolicyApplied { get; } = new EvaluationJobStatus(OptimalPolicyAppliedValue);
        /// <summary> onlinePolicyRetained. </summary>
        public static EvaluationJobStatus OnlinePolicyRetained { get; } = new EvaluationJobStatus(OnlinePolicyRetainedValue);
        /// <summary> Determines if two <see cref="EvaluationJobStatus"/> values are the same. </summary>
        public static bool operator ==(EvaluationJobStatus left, EvaluationJobStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EvaluationJobStatus"/> values are not the same. </summary>
        public static bool operator !=(EvaluationJobStatus left, EvaluationJobStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EvaluationJobStatus"/>. </summary>
        public static implicit operator EvaluationJobStatus(string value) => new EvaluationJobStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EvaluationJobStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EvaluationJobStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
