// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.Personalizer.Models
{
    public partial class PolicyResult
    {
        internal static PolicyResult DeserializePolicyResult(JsonElement element)
        {
            Optional<string> name = default;
            Optional<string> arguments = default;
            Optional<PolicySource> policySource = default;
            Optional<IReadOnlyList<PolicyResultSummary>> summary = default;
            Optional<PolicyResultTotalSummary> totalSummary = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("arguments"))
                {
                    arguments = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policySource"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    policySource = new PolicySource(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("summary"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<PolicyResultSummary> array = new List<PolicyResultSummary>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PolicyResultSummary.DeserializePolicyResultSummary(item));
                    }
                    summary = array;
                    continue;
                }
                if (property.NameEquals("totalSummary"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    totalSummary = PolicyResultTotalSummary.DeserializePolicyResultTotalSummary(property.Value);
                    continue;
                }
            }
            return new PolicyResult(name.Value, arguments.Value, Optional.ToNullable(policySource), Optional.ToList(summary), totalSummary.Value);
        }
    }
}
