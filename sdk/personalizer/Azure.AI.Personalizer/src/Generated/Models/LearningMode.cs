// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Personalizer.Models
{
    /// <summary> Learning Modes for Personalizer. </summary>
    public readonly partial struct LearningMode : IEquatable<LearningMode>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="LearningMode"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LearningMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OnlineValue = "Online";
        private const string ApprenticeValue = "Apprentice";
        private const string LoggingOnlyValue = "LoggingOnly";

        /// <summary> Online. </summary>
        public static LearningMode Online { get; } = new LearningMode(OnlineValue);
        /// <summary> Apprentice. </summary>
        public static LearningMode Apprentice { get; } = new LearningMode(ApprenticeValue);
        /// <summary> LoggingOnly. </summary>
        public static LearningMode LoggingOnly { get; } = new LearningMode(LoggingOnlyValue);
        /// <summary> Determines if two <see cref="LearningMode"/> values are the same. </summary>
        public static bool operator ==(LearningMode left, LearningMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LearningMode"/> values are not the same. </summary>
        public static bool operator !=(LearningMode left, LearningMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LearningMode"/>. </summary>
        public static implicit operator LearningMode(string value) => new LearningMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LearningMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LearningMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
