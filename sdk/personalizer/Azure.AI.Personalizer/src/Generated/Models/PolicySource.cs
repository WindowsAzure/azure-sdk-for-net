// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Personalizer.Models
{
    /// <summary> The source of the Learning Settings. </summary>
    public readonly partial struct PolicySource : IEquatable<PolicySource>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="PolicySource"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PolicySource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OnlineValue = "Online";
        private const string BaselineValue = "Baseline";
        private const string RandomValue = "Random";
        private const string CustomValue = "Custom";
        private const string OfflineExperimentationValue = "OfflineExperimentation";

        /// <summary> Online. </summary>
        public static PolicySource Online { get; } = new PolicySource(OnlineValue);
        /// <summary> Baseline. </summary>
        public static PolicySource Baseline { get; } = new PolicySource(BaselineValue);
        /// <summary> Random. </summary>
        public static PolicySource Random { get; } = new PolicySource(RandomValue);
        /// <summary> Custom. </summary>
        public static PolicySource Custom { get; } = new PolicySource(CustomValue);
        /// <summary> OfflineExperimentation. </summary>
        public static PolicySource OfflineExperimentation { get; } = new PolicySource(OfflineExperimentationValue);
        /// <summary> Determines if two <see cref="PolicySource"/> values are the same. </summary>
        public static bool operator ==(PolicySource left, PolicySource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PolicySource"/> values are not the same. </summary>
        public static bool operator !=(PolicySource left, PolicySource right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PolicySource"/>. </summary>
        public static implicit operator PolicySource(string value) => new PolicySource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PolicySource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PolicySource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
