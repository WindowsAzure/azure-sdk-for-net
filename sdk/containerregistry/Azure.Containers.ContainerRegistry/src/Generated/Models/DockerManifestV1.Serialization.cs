// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Containers.ContainerRegistry.ResumableStorage
{
    internal partial class DockerManifestV1
    {
        internal static DockerManifestV1 DeserializeDockerManifestV1(JsonElement element)
        {
            Optional<string> architecture = default;
            Optional<string> name = default;
            Optional<string> tag = default;
            Optional<IReadOnlyList<DockerManifestV1FsLayer>> fsLayers = default;
            Optional<IReadOnlyList<DockerManifestV1History>> history = default;
            Optional<IReadOnlyList<DockerManifestV1ImageSignature>> signatures = default;
            int schemaVersion = default;
            string mediaType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("architecture"))
                {
                    architecture = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tag"))
                {
                    tag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fsLayers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DockerManifestV1FsLayer> array = new List<DockerManifestV1FsLayer>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DockerManifestV1FsLayer.DeserializeDockerManifestV1FsLayer(item));
                    }
                    fsLayers = array;
                    continue;
                }
                if (property.NameEquals("history"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DockerManifestV1History> array = new List<DockerManifestV1History>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DockerManifestV1History.DeserializeDockerManifestV1History(item));
                    }
                    history = array;
                    continue;
                }
                if (property.NameEquals("signatures"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DockerManifestV1ImageSignature> array = new List<DockerManifestV1ImageSignature>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DockerManifestV1ImageSignature.DeserializeDockerManifestV1ImageSignature(item));
                    }
                    signatures = array;
                    continue;
                }
                if (property.NameEquals("schemaVersion"))
                {
                    schemaVersion = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("mediaType"))
                {
                    mediaType = property.Value.GetString();
                    continue;
                }
            }
            return new DockerManifestV1(schemaVersion, mediaType, architecture.Value, name.Value, tag.Value, Optional.ToList(fsLayers), Optional.ToList(history), Optional.ToList(signatures));
        }
    }
}
